---
name: Test

on:
  push:
    tags:
      - v*
    branches:
      - master
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          only-new-issues: true

  test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Go Modules Version
        id: get-go-mod-version
        run: |
          GO_VERSION="$(sed -n 's/^go \(.*\)$/\1/p' go.mod)"
          echo "::set-output name=go-version::$GO_VERSION"
        shell: bash
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.get-go-mod-version.outputs.go-version }}
      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Go Test
        run: go test ./... -coverprofile=coverage.txt -covermode=atomic
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v1.0.2
        with:
          token: 9d023a81-acb8-41a3-9684-80dac3c91c8c
          file: ./coverage.txt
          flags: unittests
        if: runner.os == 'Linux'
